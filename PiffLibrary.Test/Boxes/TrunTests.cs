using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.IO;
using System.Linq;

namespace PiffLibrary.Test.Boxes
{
    [TestClass]
    public class TrunTests
    {
        private static readonly byte[] TRun = new byte[]
        {
            0, 0, 0x02, 0xCC,
            0x74, 0x72, 0x75, 0x6E,
            0, 0x00, 0x03, 0x01, // Version & flags: data-offset, sample-duration, sample-size
            0, 0, 0, 87, // Count
            0, 0, 0x06, 0x43, // Data offset
            // Sample duration and size [87]
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x00, 0x0A,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x00, 0xEA,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0xEF,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x00, 0xEC,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0xEC,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x02, 0x75,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x9D,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x6D,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x7A,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x4E,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x82,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x5D,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x89,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x60,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x75,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x6B,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x5A,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x8D,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x55,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x73,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x7D,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x4B,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x69,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x8F,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x4F,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x7C,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x61,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x6D,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x5A,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x75,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x78,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x69,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x72,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x60,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x79,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x5C,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x7C,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x69,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x9D,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x64,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x58,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x74,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x6B,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x70,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x6F,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x62,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x5F,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x74,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x60,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x8E,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x75,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x40,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x79,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x6A,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x5A,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x71,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x6D,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x93,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x50,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x8A,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x59,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x81,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x7F,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x38,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x86,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x75,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x62,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x6A,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x6A,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x5A,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x9A,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x61,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x56,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x88,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x65,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x60,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x6F,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x6F,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x4B,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x6F,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x7B,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x66,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x75,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x73,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x88,
            0x00, 0x03, 0x8B, 0x08, 0x00, 0x00, 0x01, 0x64,
            0x00, 0x03, 0x8B, 0x07, 0x00, 0x00, 0x01, 0x81
        };


        [TestMethod]
        public void Trun_ReadNoFields()
        {
            var bytes = new byte[] {
                0, 0, 0, 16, 0x74, 0x72, 0x75, 0x6E, 0, 0, 0, 0,
                0, 0, 0, 0
            };
            using var ms = new MemoryStream(bytes, false);
            var ctx = new PiffReadContext();

            var length = PiffReader.ReadBox(ms, ctx, out var box);

            Assert.IsNotNull(box);
            Assert.AreEqual(16uL, length);
            var trun = box as PiffTrackFragmentRun;
            Assert.IsNotNull(trun);
            Assert.AreEqual(0u, trun.SampleCount);
            Assert.AreEqual(0, trun.DataOffset);
        }


        [TestMethod]
        public void Trun_ReadAllFieldsNoSamples()
        {
            var bytes = new byte[] {
                0, 0, 0, 24, 0x74, 0x72, 0x75, 0x6E, 0xFF, 0xFF, 0xFF, 0xFF,
                0, 0, 0, 0, 0xFF, 0xFF, 0xFF, 0xFF, 0, 0, 0, 0
            };
            using var ms = new MemoryStream(bytes, false);
            var ctx = new PiffReadContext();

            var length = PiffReader.ReadBox(ms, ctx, out var box);

            Assert.IsNotNull(box);
            Assert.AreEqual(24uL, length);
            var trun = box as PiffTrackFragmentRun;
            Assert.IsNotNull(trun);
            Assert.AreEqual(0u, trun.SampleCount);
            Assert.AreEqual(-1, trun.DataOffset);
        }


        [TestMethod]
        public void Trun_ReadWithSamples()
        {
            using var ms = new MemoryStream(TRun, false);
            var ctx = new PiffReadContext();

            var length = PiffReader.ReadBox(ms, ctx, out var box);

            Assert.IsNotNull(box);
            Assert.AreEqual(0x2CCuL, length);
            var trun = box as PiffTrackFragmentRun;
            Assert.IsNotNull(trun);
            Assert.AreEqual(87u, trun.SampleCount);
        }


        [TestMethod]
        public void Trun_RoundTrip()
        {
            using var input = new MemoryStream(TRun, false);
            var rctx = new PiffReadContext();

            PiffReader.ReadBox(input, rctx, out var box);

            using var output = new MemoryStream();
            var wctx = new PiffWriteContext();

            PiffWriter.WriteBox(output, box, wctx);

            var res = output.GetBuffer().Take((int) output.Position).ToArray();
            CollectionAssert.AreEqual(TRun, res);
        }
    }
}
